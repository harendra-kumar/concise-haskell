Syntax in a Nutshell
====================

Terminology
-----------

+----------+------------------------------------------------------------------+
| built-in | Functionality provided by the language i.e. GHC, the             |
|          | compiler                                                         |
+----------+------------------------------------------------------------------+
| packages | Modules (libraries) live in packages which can be installed      |
|          | independently.                                                   |
+----------+------------------------------------------------------------------+
| base     | `base` is a package providing basic and essential functionality  |
+----------+------------------------------------------------------------------+
| Prelude  | A module from `base` package which is implicitly imported        |
+----------+------------------------------------------------------------------+

+---------------+-------------------------------------------------------------+
| Precedence    | Higher precedence operator is evaluated before lower.       |
+---------------+-------------------------------------------------------------+
| Associativity | How operators of the same precedence are grouped in the     |
|               | absence of parentheses.                                     |
+---------------+-------------------------------------------------------------+
| Fixity        | Same as associativity.                                      |
+---------------+--------------+--------------+-------------------------------+
| Associative   | (1 + 2) + 3  | 1 + 2 + 3    | 1 + (2 + 3)                   |
+---------------+--------------+--------------+-------------------------------+
| Right         |              | 1 : 2 : []   | 1 : (2 : [])                  |
| Associative   |              |              |                               |
+---------------+--------------+--------------+-------------------------------+
| Left          | ((f x) y) z  | f x y z      |                               |
| Associative   |              |              |                               |
+---------------+--------------+--------------+-------------------------------+

Filenames
---------

+-----------+------------------+
| Extension | Meaning          |
+-----------+------------------+
| .hs       | Haskell          |
+-----------+------------------+
| .lhs      | Literate Haskell |
+-----------+------------------+

Importing Modules
-----------------

Operator Precedence and Associativity
-------------------------------------

+---------------------+-----+------------+------------------------------------------+---------------------+---------------+---------------------+
| Groups              | Prec| Op         | Description                              | Left Associative    | Associativity | Right Associative   |
|                     |     |            |                                          |                     | Reason        |                     |
+=====================+=====+============+==========================================+=====================+===============+=====================+
| Functionish (       |     | {}         | Record application                       | ({...} {...}) {...} |               |                     |
| application, index) +-----+------------+------------------------------------------+---------------------+---------------+---------------------+
|                     |     |            | Function application                     | (f x) y             |               |                     |
|                     +-----+------------+------------------------------------------+---------------------+---------------+---------------------+
|                     | 9   | .          | Function composition                     |                     | Reduction     | f . (g . h)         |
|                     |     +------------+------------------------------------------+---------------------+---------------+---------------------+
|                     |     | !!         | List index                               | (a !! 2) !! 3       |               |                     |
|                     |     +------------+------------------------------------------+---------------------+---------------+---------------------+
|                     |     | !          | Map, Array index                         | (a ! 2) ! 3         |               |                     |
|                     |     +------------+------------------------------------------+---------------------+---------------+---------------------+
|                     |     | ``\\``     | Map subtract                             | ``(a \\ b) \\ c``   | ?             |                     |
|                     |     +------------+------------------------------------------+---------------------+---------------+---------------------+
|                     |     | //         | Array append                             | (a // b) // c       | ?             |                     |
+---------------------+-----+------------+------------------------------------------+---------------------+---------------+---------------------+
| Arithmetic (        | 7   | / *        | Multiplication and division              | (1 / 2) / 2         | Rounding      |                     |
| Numeric, list)      +-----+------------+------------------------------------------+---------------------+---------------+---------------------+
|                     | 6   | \+ -       | Addition and subtraction                 | (1 + 2) + 2         | Overflow      |                     |
|                     +-----+------------+------------------------------------------+---------------------+---------------+---------------------+
|                     | 5   | :          | List construction                        |                     |               | 1 : (2 : [])        |
|                     |     +------------+------------------------------------------+---------------------+---------------+---------------------+
|                     |     | ++         | List append                              |                     | Reduction     | a ++ (b ++ c)       |
|                     |     +------------+------------------------------------------+---------------------+---------------+---------------------+
|                     |     | ``\\``     | List subtract                            |                                                           |
+---------------------+-----+------------+------------------------------------------+-----------------------------------------------------------+
| Comparisons &       | 4   | == /=      | Comparisons and predicates               |                                                           |
| Boolean             |     | < <= > >=  |                                          |                                                           |
|                     |     | elem       |                                          |                                                           |
|                     |     | notElem    |                                          |                                                           |
|                     +-----+------------+------------------------------------------+---------------------+---------------+---------------------+
|                     | 3   | &&         | boolean `and`                            |                     | Reduction     | a && (b && c)       |
|                     +-----+------------+------------------------------------------+---------------------+---------------+---------------------+
|                     | 2   | ||         | boolean `or`                             |                     | Reduction     | a || (b || c)       |
+---------------------+-----+------------+------------------------------------------+---------------------+---------------+---------------------+
| Sequencing & $      | 1   | >> >>=     | Sequencing                               | (a >> b) >> c       |               |                     |
|                     +-----+------------+------------------------------------------+---------------------+---------------+---------------------+
|                     | 0   | $          | function application                     |                     |               | f $ (g $ h x)       |
+---------------------+-----+------------+------------------------------------------+---------------------+---------------+---------------------+
| You cannot mix different operators at the same precedence without explicit parenthesis.                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Only ``:`` and ``$`` are right associative due to inherent semantics, the rest are right associative                                          |
| only to force the reduction order of the expression for performance reasons or to force evaluation semantics.                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------+
| All left associative operations are left associative because of inherent semantics.                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------+
| For any other operators use hoogle.                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------+

+-----------------------------------------------------------------------------+
| Some Precedence Examples                                                    |
+==================================+==========================================+
| show R {x = 1, y = 1}            | show (R {x = 1, y = 1})                  |
+----------------------------------+------------------------------------------+
| f . g x                          | f . (g x)                                |
+----------------------------------+------------------------------------------+
| 1 * 2 + 3 + 4 / 5                | (1 * 2) + 3 + (4 / 5)                    |
+----------------------------------+------------------------------------------+
| 1 + 2 : 3 : []                   | (1 + 2) : 3 : []                         |
+----------------------------------+------------------------------------------+
| 1 == 1 && 2 > 1                  | (1 == 1) && (2 > 1)                      |
+----------------------------------+------------------------------------------+
| False && True || True            | (False && True) || True                  |
+----------------------------------+------------------------------------------+
| ``"a" ++ "b" \\ "a"``            | Cannot mix different operators with      |
|                                  | same precedence                          |
+----------------------------------+------------------------------------------+

Data Types
----------

Basic Data Types (Prelude)
~~~~~~~~~~~~~~~~~~~~~~~~~~

+----------+------------------------------------------------------------------+
| Type     | Values                                                           |
+----------+----------+--------+------------+---------------------------------+
| Char     | 'a'      | 'b'    | 'c'        | Unicode character literals      |
+----------+----------+--------+------------+---------------------------------+
| Int      | -1       | 0      | 1          | Signed, Min: 2^63, Max: 2^63 - 1|
+----------+----------+--------+------------+---------------------------------+
| Word     | 0        | 1      | 2          | Unsigned, Min: 0, Max 2^64 - 1  |
+----------+----------+--------+------------+---------------------------------+
| Float    | -5.3     | 0.33333334          | Floating point                  |
+----------+----------+---------------------+---------------------------------+
| Double   | -5.3     | 0.3333333333333333  | Double precision floating point |
+----------+----------+---------------------+---------------------------------+

Type Signatures
~~~~~~~~~~~~~~~

+--------+-------------------------------------------------------------------+
| ``::`` | Specifies type of a function or expression. Read it as `has type` |
+--------+-------------------------------------------------------------------+

::

  v :: Int
  v = 10

  f :: Int -> Int
  f a = a + 10

  f :: Int -> Int -> Int
  f a b = a + b + 10

* partial type signatures (_ wildcard)

Function Type
~~~~~~~~~~~~~

Type of Expression
~~~~~~~~~~~~~~~~~~

* Expression or subexpression

::

  v = 10 :: Int

Defining New Data Types
~~~~~~~~~~~~~~~~~~~~~~~

::

  data Pair   = Pair Int Int deriving (Show, Eq)       -- Product
  data RPair  = RPair { first :: Int, second :: Int }  -- Record
  data Color  = Red | Green                            -- Sum
  data List a = Empty | Cons a (List a)                -- Recursive

Constructing Data
~~~~~~~~~~~~~~~~~

+---------------------------------------------------+
| ::                                                |
|                                                   |
|   let pair  = Pair 10 20                          |
|   let pair  = RPair 10 20                         |
|   let pair  = RPair {first=10, second=20}         |
|   let color = Red                                 |
|   let list  = Cons 10 (Cons 20 Empty) :: List Int |
+---------------------------------------------------+

Deconstructing Data by Pattern Match
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Pattern matching on case and function is strict by default
* Pattern match in function can be expressed in terms of case
* Pattern matching in let and where is lazy by default
* pattern matches on sum types can fail if we have not covered all possibilities
* ignore value with _
* as pattern

Decomposing Product Types
^^^^^^^^^^^^^^^^^^^^^^^^^

+--------------------------------------------------+
| ::                                               |
|                                                  |
|   let pair = Pair 10 20                          |
+----------------------+---------------------------+
| Case                 | Function                  |
+----------------------+---------------------------+
| ::                   | ::                        |
|                      |                           |
|  case pair of        |  total (Pair a b) = a + b |
|    Pair a b -> a + b |                           |
+----------------------+---------------------------+
| Let                  | Where                     |
+----------------------+---------------------------+
| ::                   | ::                        |
|                      |                           |
|  let Pair a b = pair |  total = a + b            |
|  in a + b            |   where Pair a b = pair   |
+----------------------+---------------------------+

Selecting Sum Types
^^^^^^^^^^^^^^^^^^^

+------------------------------------------------------------------+
| ::                                                               |
|                                                                  |
|  let color = Red                                                 |
+--------------------------------+---------------------------------+
| Case                           | Function                        |
+--------------------------------+---------------------------------+
| ::                             | ::                              |
|                                |                                 |
|  case color of                 |  name Red   = "red"             |
|    Red   -> "red"              |  name Green = "green"           |
|    Green -> "green"            |                                 |
|                                |                                 |
+--------------------------------+---------------------------------+
| Let                            | Where                           |
+--------------------------------+---------------------------------+
| ::                             | ::                              |
|                                |                                 |
|  let Red   = color in "red"    |  where Red   = color in "red"   |
|  -- pattern match will fail    |  -- pattern match will fail     |
|  let Green = color in "green"  |  where Green = color in "green" |
+--------------------------------+---------------------------------+

Expressing Conditions
^^^^^^^^^^^^^^^^^^^^^

* if and guards

Type Synonyms
^^^^^^^^^^^^^

newtype
^^^^^^^

Basic Algebraic Data Types (Prelude)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* TODO: provide links to the definitions in base

::

  data []   a = []    | :    a (List a)                -- Recursive

Note that Haskell's built-in list is not really a special syntax it is a user
defined data type, '[]' is the empty list constructor and ':' is the Cons
constructor. Though there is a syntactic sugar to specify lists in a more
convenient way [1, 2] is equivalent to 1 : 2 : [].

+----------+----------+----------+------------+-------------------------------+
| ()       | ()       |          |            | Void value or empty tuple     |
+----------+----------+----------+------------+-------------------------------+
| (a, b)   | (1, 'a') | (0.3, 1) | (1, 2)     | Tuple of mixed types          |
+----------+----------+----------+------------+-------------------------------+
| [a]      | []       | 1 : []   | 1 : 2 : [] | List of Int                   |
|          |          |          |            | Explicit constructor syntax   |
|          +----------+----------+------------+-------------------------------+
|          | []       | [1]      | [1,2]      | Sugared syntax                |
|          +----------+----------+------------+-------------------------------+
|          | []       | ['a']    | ['a','b']  | List of chars (String)        |
|          +----------+----------+------------+-------------------------------+
|          | ""       | "a"      | "ab"       | String literals               |
+----------+----------+----------+------------+-------------------------------+
| Ordering | LT       | EQ       | GT         |                               |
+----------+----------+----------+------------+-------------------------------+
| Bool     | True     | False    |            |                               |
+----------+----------+----------+------------+-------------------------------+

Functions & Definition Equations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* ignore value with _
* top level non-function definitions
* top level functions
* Equations / regular def
* let, where
* lambda

Functions
---------

+---------------+--------------+
| Definition    | Application  |
+===============+==============+
| f a b c = ... | v = f x y z  |
+---------------+--------------+

Function Application (built-in)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+-----------------------------------------------------------------------------+
| `Space` is highest precedence and left associative function application     |
+-----------------------------------------------------------------------------+
| f x                                                                         |
+---------+-------------------------------------------------------------------+
| f x y   | (f x) y                                                           |
+---------+-------------------------------------------------------------------+
| f x y z | ((f x) y) z                                                       |
+---------+-------------------------------------------------------------------+

Prefix and Infix Functions (built-in)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+-------------+---------------+
| Prefix      | Infix         |
+=============+===============+
| ``div 4 3`` | ``4 `div` 3`` |
+-------------+---------------+
| ``(+) 4 3`` | ``4 + 3``     |
+-------------+---------------+
| ``(5 /) x`` | ``5 / x``     |
+-------------+---------------+
| ``(/ 5) x`` | ``x / 5``     |
+-------------+---------------+
| ``(5 -) x`` | ``5 - x``     |
+-------------+---------------+

+---------------------------------------------+
| Special case prefix ``-`` is always unary   |
+-------------+-------------------------------+
| ``(- 5)``   | ``-5``                        |
+-------------+-------------------------------+

Function Application (Prelude)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+-----------------------------------------------------------------------------+
| * $ is just opposite of space i.e. lowest precedence and right associative. |
| * Think evaluating everything after a $ before applying it to the function  |
|   before it.                                                                |
+-------------+---------------------------------------------------------------+
| f $ x       | f x                                                           |
+-------------+---------------------------------------------------------------+
| f $ g x     | f (g x)                                                       |
+-------------+---------------------------------------------------------------+
| f $ g $ h x | f (g (h x))                                                   |
+-------------+---------------------------------------------------------------+

+-----------------------------------------------------------------------------+
| & is reverse function application                                           |
+-----------+-----------------------------------------------------------------+
| x & f     | f x                                                             |
+-----------+-----------------------------------------------------------------+
| x & g & f | f (g x)                                                         |
+-----------+-----------------------------------------------------------------+

+-----------------------------------------------------------------------------+
| swap the arguments before applying                                          |
+--------------+--------------------------------------------------------------+
| flip f $ x y | f y x                                                        |
+--------------+--------------------------------------------------------------+

Function Composition (Prelude)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+-----------------------------------------------------------------------------+
| * ``.`` is composition, lower precedence than function application and      |
|   higher precedence than ``$``.                                             |
| * Note ``(f . g . h)`` applies ``h`` to the argument and then feeds the     |
|   result to ``g`` which feeds the result to ``f``.                          |
+-------------------+---------------------------------------------------------+
| (f . g) x         | f (g x)                                                 |
+-------------------+---------------------------------------------------------+
| f . g $ x         | (f . g) x                                               |
+-------------------+---------------------------------------------------------+
| (f . g . h) x     | f $ g $ h x                                             |
+-------------------+---------------------------------------------------------+
| f . g x           | f . (g x)                                               |
+-------------------+---------------------------------------------------------+

Defining Modules
----------------

module declaration: module X where ...

Common Prelude Functions
------------------------

Arithmetic
~~~~~~~~~~

* Defined in base

TODO: show the result of the expression

+-----------+-------------+-------------------------+
| Operation | Example     | Description             |
+===========+=============+=========================+
| \+        | 3 + 2       | Addition                |
+-----------+-------------+-------------------------+
| \-        | 3 - 2       | Subtraction             |
+-----------+-------------+-------------------------+
| \*        | 3 * 2       | Multiplication          |
+-----------+-------------+-------------------------+
| /         | 3 / 2       | Fractional division     |
+-----------+-------------+-------------------------+

+--------+----------------+---------------------------------------------------+
| ^      | 3 ^ 2          | Positive integer power                            |
+--------+----------------+---------------------------------------------------+
| ^^     | 3 ^^ 2         | Integer power                                     |
+--------+----------------+---------------------------------------------------+
| \**    | 3 \** 2.2      | Floating power                                    |
+--------+----------------+---------------------------------------------------+
| div    | 3 \`div\` (-2) | Integral division truncated towards negative      |
|        |                | infinity                                          |
+--------+----------------+---------------------------------------------------+
| mod    | 3 \`mod\` (-2) | modulus of `div`                                  |
+--------+----------------+---------------------------------------------------+
| quot   | 3 \`div\` (-2) | Integral division quotient truncated towards zero |
+--------+----------------+---------------------------------------------------+
| rem    | 3 \`div\` (-2) | remainder of `quot`                               |
+--------+----------------+---------------------------------------------------+

Comparisons
~~~~~~~~~~~

+-----------+-------------+-------------------------+
| ==        | 3 == 2      |  Equals                 |
+-----------+-------------+-------------------------+
| /=        | 3 /= 2      |  Not equal              |
+-----------+-------------+-------------------------+
| >         | 3 >  2      |  Greater than           |
+-----------+-------------+-------------------------+
| >=        | 3 >= 2      |  Greater than or equal  |
+-----------+-------------+-------------------------+
| <         | 3 <  2      |  Less than              |
+-----------+-------------+-------------------------+
| <=        | 3 <= 2      |  Less than or equal     |
+-----------+-------------+-------------------------+

Boolean Logic
~~~~~~~~~~~~~

+-----------+---------------+-------------------------+
| Operation | Example       | Remarks                 |
+===========+===============+=========================+
| ==        | True == False |                         |
+-----------+---------------+-------------------------+
| /=        | True /= False |                         |
+-----------+---------------+-------------------------+
| ||        | True || False |                         |
+-----------+---------------+-------------------------+
| &&        | True && False |                         |
+-----------+---------------+-------------------------+
| not       | not True      |                         |
+-----------+---------------+-------------------------+

Lists
~~~~~

* See prelude

References
----------

* https://www.haskell.org/hoogle/ One stop shop for any help including keywords
* https://wiki.haskell.org/Keywords Description of all keywords
* https://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html
* https://hackage.haskell.org/package/base
* https://hackage.haskell.org/ All Haskell packages and their documentation

* Its a good idea to get familiar with Prelude and then other modules in the
  base package after you are familiar with the basic syntax.

